#include <EEPROM.h>
#include <TVout.h>
#include <TVoutfonts/fontALL.h>


//#define DEBUG true

#define UP 4 		//botao cima (azul)
#define RIGHT 2		//botao direita (verde)
#define DOWN 5		//botao baixo (vermelho)
#define LEFT 3		//botao esquerda (amarelo)
#define ACTION 6 // botao acao ()

#define SPEED 5

#define TOTAL_ITENS 10

#define ITEM_MAX_CHARACTERS 11
#define ITEM_MAX 8
#define ARR_SIZE(x)  (sizeof(x) / sizeof((x)[0]))

unsigned char xPlayer = 35;		//coordenada X do player
unsigned char yPlayer = 45;		//coordenada Y do player
unsigned char sizePlayer = 10;
unsigned char entrada = 0;
bool ui = false;
bool UP_PRESSED = false;
bool DOWN_PRESSED = false;
bool LEFT_PRESSED = false;
bool RIGHT_PRESSED = false;


enum room{NO_ROOM, TEST, ANOTHER_ONE, SALAO_PRINCIPAL, CORREDOR, COZINHA, ARMAZEM} actual_room;
/*
só copia e cola esse switch nos lugar
switch(actual_room){
		case TEST:
			break;
		case ANOTHER_ONE:
			break;
		case SALAO_PRINCIPAL:
			break;
		case CORREDOR:
			break;
		case COZINHA:
			break;
		case ARMAZEM:
			break;
}
*/
enum characters{NOBODY, BOY} talking_to;
/*
switch(talking_to){
		case BOY:
			break;
}
*/

enum ui_mode{TEXT, TEXT_WITH_IMAGE, INVENTORY} actual_ui;



// eu crei 1000 variaveis com o mesmo conteudo q essa para testar e funcionou então acho q é meio whatever msm
PROGMEM const unsigned char cat[] = {
	20,20,
	0xff, 0xff, 0xf0, 0xff, 0xff, 0xf0, 0xff, 0xfd, 0xf0, 0xff, 0xfb, 0xf0, 0xfe, 0x17, 0xf0, 0xf9, 
	0xef, 0xf0, 0xf7, 0xd7, 0xf0, 0xef, 0xbb, 0xf0, 0xdf, 0x7e, 0xf0, 0xbe, 0xff, 0xf0, 0xbd, 0xff, 
	0xf0, 0x7b, 0xee, 0x70, 0x77, 0xff, 0x70, 0xaf, 0xff, 0x70, 0xdf, 0xf9, 0xb0, 0xef, 0xf7, 0xb0, 
	0xf0, 0xfe, 0x70, 0xfe, 0x7e, 0xf0, 0xff, 0x7d, 0xf0, 0xff, 0x7c, 0xf0
};

// 'hall', 128x72px
PROGMEM const unsigned char hall[] = {
	128,72,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x0c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x30, 
	0x0c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x30, 
	0x0c, 0x07, 0xff, 0x9f, 0xfe, 0x09, 0xff, 0xff, 0xff, 0xff, 0x90, 0x7f, 0xf9, 0xff, 0xe0, 0x30, 
	0x0a, 0x04, 0x00, 0x90, 0xa2, 0x09, 0xff, 0xff, 0xff, 0xff, 0x90, 0x4f, 0xc9, 0x00, 0x20, 0x50, 
	0x0a, 0x05, 0x00, 0x91, 0xc2, 0x09, 0x00, 0x00, 0x00, 0x00, 0x90, 0x5f, 0xe9, 0x43, 0x20, 0x50, 
	0x0a, 0x04, 0x8c, 0x90, 0xe2, 0x19, 0x00, 0x00, 0x00, 0x00, 0x98, 0x4a, 0x49, 0x1d, 0x20, 0x50, 
	0x0a, 0x04, 0x7f, 0x91, 0x42, 0x19, 0xff, 0xff, 0xff, 0xff, 0x98, 0x4f, 0xc9, 0x39, 0xa0, 0x50, 
	0x09, 0x07, 0xff, 0x92, 0x02, 0x19, 0xff, 0xff, 0xff, 0xff, 0x98, 0x43, 0x09, 0x40, 0x60, 0x90, 
	0x09, 0x07, 0xff, 0x9f, 0xfe, 0x25, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x7f, 0xf9, 0xff, 0xe0, 0x90, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x09, 0x00, 0x00, 0x00, 0x01, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x90, 
	0x08, 0xff, 0xff, 0xff, 0xff, 0x42, 0xff, 0xff, 0xff, 0xff, 0x42, 0xff, 0xff, 0xff, 0xff, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0x24, 0x80, 0x00, 0x00, 0x01, 0x24, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0x18, 0x80, 0x00, 0x00, 0x01, 0x18, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0x42, 0x80, 0x00, 0x00, 0x01, 0x42, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0x42, 0x80, 0x00, 0x00, 0x01, 0x42, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x01, 0xc3, 0x80, 0x00, 0x00, 0x01, 0xc3, 0x80, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0x10, 
	0x0e, 0x80, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0x70, 
	0x09, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x90, 
	0x0b, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0xd0, 
	0x0a, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x50, 
	0x0a, 0x40, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x02, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x50, 
	0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 
	0x09, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x90, 
	0x0e, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x70, 
	0x0b, 0x40, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x02, 0xd0, 
	0x09, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x03, 0x90, 
	0x08, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char corredor[] = {
	// 'corredor', 128x72px
	128,72,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x81, 0x80, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x27, 0xff, 0xc9, 0x81, 0x80, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x41, 0x81, 0x98, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x25, 0xff, 0x49, 0xa5, 0x98, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x24, 0x00, 0x49, 0xa5, 0x98, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x07, 0xff, 0xc1, 0xa5, 0xa4, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0xa5, 0xc2, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xa5, 0xc3, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0xa5, 0x42, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x24, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x18, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x12, 0x01, 0x00, 0x00, 0x00, 0xa5, 0xff, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x42, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x15, 0x81, 0x00, 0x00, 0x00, 0xa5, 0x42, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x14, 0xff, 0x00, 0x00, 0x00, 0xa5, 0xc3, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xe5, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x17, 0xff, 0xff, 0xff, 0xff, 0xe5, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x13, 0xff, 0xff, 0xff, 0xff, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1d, 0xff, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x81, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x81, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x81, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xa5, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa5, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa5, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa5, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa5, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa5, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xa5, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xa5, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char cozinha[] = {
	// 'cozinha', 128x72px
	128,72,
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x14, 0x0c, 0x21, 0x00, 0x00, 0x00, 0x84, 0x30, 0x28, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x14, 0x03, 0xff, 0x80, 0x00, 0x01, 0xff, 0xc0, 0x28, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x80, 0x18, 0x00, 0x00, 0x36, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x66, 0x80, 0xff, 0x00, 0xff, 0x36, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x66, 0x80, 0x81, 0x00, 0x81, 0x32, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x80, 0x99, 0x00, 0x81, 0x32, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x66, 0x80, 0xff, 0x00, 0xff, 0x12, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0x66, 0x80, 0x00, 0x00, 0x00, 0x12, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x13, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0xff, 0x00, 0x00, 0x00, 0xff, 0x04, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x60, 0xff, 0x00, 0x00, 0x00, 0xff, 0x06, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x42, 0xff, 0x00, 0x00, 0x00, 0xff, 0x42, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0xff, 0x00, 0x00, 0x00, 0xff, 0x04, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x60, 0xff, 0x00, 0x00, 0x00, 0xff, 0x06, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x42, 0xff, 0x00, 0x00, 0x00, 0xff, 0x42, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0xff, 0x00, 0x00, 0x00, 0xff, 0x04, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x60, 0xff, 0x00, 0x00, 0x00, 0xff, 0x06, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x42, 0xff, 0x00, 0x00, 0x00, 0xff, 0x42, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0xff, 0x00, 0x00, 0x00, 0xff, 0x04, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x60, 0xff, 0x00, 0xff, 0x00, 0xff, 0x06, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0x81, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0xbd, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0xa5, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0xff, 0x00, 0xa5, 0x00, 0xff, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x7e, 0x81, 0x00, 0xa5, 0x00, 0x81, 0x7e, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x42, 0x81, 0x00, 0xa5, 0x00, 0x81, 0x42, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xa5, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa5, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa5, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xff, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

PROGMEM const unsigned char armazem[] = {
	// 'armazem', 128x72px
	128,72,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x02, 0xff, 0x40, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x02, 0x81, 0x40, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x81, 0x40, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x81, 0x40, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x81, 0x40, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x02, 0x81, 0x40, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x02, 0x81, 0x40, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xff, 0xff, 0x00, 0xff, 0xff, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xe8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0e, 0x00, 0x00, 0x00, 0x70, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0xff, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x01, 0x00, 0x80, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x02, 0x7e, 0x40, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x04, 0x81, 0x20, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x05, 0x3c, 0xa0, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x05, 0x7e, 0xa0, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x05, 0x66, 0xa0, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x05, 0x66, 0xa0, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x05, 0x7e, 0xa0, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x05, 0x3c, 0xa0, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x04, 0x81, 0x20, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x02, 0x7e, 0x40, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x01, 0x00, 0x80, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0xff, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x0a, 0x00, 0x00, 0x00, 0x50, 0x28, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xfa, 0x00, 0x00, 0x00, 0x5f, 0xe8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x40, 0x48, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xc8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

TVout TV;
char itens[ITEM_MAX][ITEM_MAX_CHARACTERS] = { "", "", "", "", "", "", "", ""};


void addItemToInventory(char text[]){
	for(int i = 0; i < ARR_SIZE(itens); i++){
		if(!(bool) strcmp(itens[i], "")){
			strncpy(itens[i], text, ITEM_MAX_CHARACTERS);
			return;
		}
	}
}


class Collidable{
	public:
		unsigned char posX = 0;
		unsigned char posY = 0;
		unsigned char width;
		unsigned char height ;

		bool isItem = false;
		char item[ITEM_MAX_CHARACTERS];

		bool canCollide = true;
		
		bool canDraw = true;
		room nextRoom;
		unsigned char roomDoor;
		characters npc;

		Collidable(unsigned char x, 
							 unsigned char y,
							 unsigned char w = 20,
							 unsigned char h = 20, 
						   room next = NO_ROOM, 
							 unsigned char door = 0,
							 char itemName[ITEM_MAX_CHARACTERS] = {""}, 
							 characters talk_to = NOBODY
							  )
							{
									posX = x;
									posY = y;
									width = w;
									height = h;
									if (x == 0 && y == 0){
										width = 0;
										height = 0;
									}

									strncpy(item, itemName, ITEM_MAX_CHARACTERS);
									// retorna 0 se é igual e 0 é false
									isItem = strcmp(itemName, "");
									nextRoom = next;
									npc = talk_to;
									roomDoor = door;
							} 
					void draw(){
						TV.draw_rect(posX, posY, width, height, WHITE);
					}
					void changeCollision(bool keepDrawing){
						canCollide = false;
						canDraw = keepDrawing;
						addItemToInventory(item);
					}
		};


// provavelmente vai ter q reverter de volta para variavel normal
// não ficar inventando moda é uma coisa boa
// vai ter um limite maximo de coisas que da para colidir
Collidable ls_collision[] = {
	Collidable(0,0),
	Collidable(0,0),
	Collidable(0, 0),
	Collidable(0, 0)
};

void clearCollision() {
	unsigned char size = (unsigned char) ARR_SIZE(ls_collision);
	for(char i = 0; i< size; i++){
		ls_collision[i] = Collidable(0, 0);
	}
}

void changeRoom(){
	clearCollision();
	switch(actual_room){
		case TEST:
			break;
		case ANOTHER_ONE:
			break;
		case SALAO_PRINCIPAL:
			switch(entrada){
				// esquerda
				case 0:
					xPlayer = 40; yPlayer = 40; 
					ls_collision[0] = Collidable(7, 28, 6, 15);
					ls_collision[1] = Collidable(115, 28, 6, 15, CORREDOR);
					break;
				// direita
				case 1:
					break;
				case 2:
					break;
				case 3:
					break;
			}
			break;
		case CORREDOR:
			switch(entrada){
				case 0:
					xPlayer = 30;//20;	
					yPlayer = 28; 
					ls_collision[0] = Collidable(20, 28, 6, 15, SALAO_PRINCIPAL, 1);
					ls_collision[1] = Collidable(50, 15, 15, 6, COZINHA);
					break;
				case 1:
					break;
				case 2:
					break;
				case 3:
					break;
			}
			break;
		case COZINHA:
			xPlayer = 60;//20;	
			yPlayer = 50;
			ls_collision[0] = Collidable(50, 15, 15, 6, NO_ROOM, 0, "Faca");
			ls_collision[1] = Collidable(70, 15, 15, 6, NO_ROOM, 0, "", BOY);
			break;
		case ARMAZEM:
			break;
		#ifdef DEBUG
			for(int i = 0; i < 3; i++){
				ls_collision[i] = Collidable(0,0);
			}
		#endif
	}
}


int temp = 0;
// [numero de itens + 1] [numero de letras + 1]

// tá batendo algum limite aqui
char speech[2][40] = {"Meu nome eh Yoshikage Kira. ", "Tenho 33 anos. "};

void setup() {
	pinMode(UP, INPUT_PULLUP);
	pinMode(RIGHT, INPUT_PULLUP);
	pinMode(DOWN, INPUT_PULLUP);
	pinMode(LEFT, INPUT_PULLUP);
	pinMode(ACTION, INPUT_PULLUP);
	TV.begin(NTSC, 128, 96); //start da tela com as dimensões da mesma
	actual_ui = INVENTORY;
	actual_room = SALAO_PRINCIPAL;
	changeRoom();
	TV.select_font(font4x6);

	#ifdef DEBUG
		for(int i = 0; i < ITEM_MAX - 1; i++){
			strncpy(itens[i], "teste", ITEM_MAX_CHARACTERS);
		}
		//actual_ui = TEXT_WITH_IMAGE;
		//talking_to = BOY;
		//ui = true;
	#endif
}

// aqui pode configurar essa atualização da tela
void clearScreen(){
	if (actual_ui == INVENTORY && ui){
		return;
	}
	TV.clear_screen(); //refresh da tela
}


void loop() {
	TV.delay_frame(1);
    //clearscreen when player moves
    if (UP_PRESSED || DOWN_PRESSED || LEFT_PRESSED || RIGHT_PRESSED || ACTION_PRESSED) {
        clearScreen();
        UP_PRESSED = false;
        DOWN_PRESSED = false;
        LEFT_PRESSED = false;
        RIGHT_PRESSED = false;
    }
    
    if (ACTION_PRESSED){
		clearScreen();
        TV.delay_frame(20)
		ACTION_PRESSED = false;
	}

	
	ui ? showUi(): drawMap();
    getInput();
	#ifdef DEBUG
		TV.print(180, 3, verifyCollision(temp, yPlayer));
		TV.print(180, 12, xPlayer);
		TV.print(180, 25, actual_ui);
	#endif
}

void footStepSounding() {
    if (actual_ui == INVENTORY && ui){
        return;
    }
    if (xPlayer % 2 == 0 && yPlayer % 2 == 0){
        TV.tone (1000, 10);
    }
}


void processMovementInput(unsigned char direction){
    
	switch(direction){
		case UP:
			if(yPlayer > 0){
                UP_PRESSED = true;
				temp = yPlayer - SPEED;
				// existe a posição 0
				if(verifyCollision(xPlayer, temp))
					yPlayer = temp;
			}
			else{
				yPlayer = 96;
			}
			break;
		case DOWN:
			if(yPlayer < 96){
                DOWN_PRESSED = true;
				temp = yPlayer + SPEED;
				// existe a posição 0
				if(verifyCollision(xPlayer, temp))
					yPlayer = temp;
				
			}
			else{ 
				yPlayer = 0;
			}
			break;
		case LEFT:
			if(xPlayer > 0){
                LEFT_PRESSED = true;
					temp = xPlayer - SPEED;
					// existe a posição 0
					if(verifyCollision(temp, yPlayer))
						xPlayer = temp;
				}
				else{
					xPlayer = 128;
				}
			break;
		case RIGHT:
			if(xPlayer < 128){
                RIGHT_PRESSED = true;
				temp = xPlayer + SPEED;
				// existe a posição 0
				if(verifyCollision(temp, yPlayer))
					xPlayer = temp;
			}
			else{
				xPlayer = 0;
			}
			break;
	}
}

void processUiInput(unsigned char direction){
	switch(direction){
		case UP:
			actual_ui = INVENTORY;
			break;
		case DOWN:
			if (talking_to != NOBODY){
				actual_ui = TEXT_WITH_IMAGE;
				talking_logic();
			}
			break;
		case LEFT:
			break;
		case RIGHT:
			break;
	}
}

void talking_logic(){}

void getInput(){
		
		//Movimentação do player
		if(digitalRead(UP) == LOW) ui ? processUiInput(UP): processMovementInput(UP);			
		if(digitalRead(RIGHT) == LOW)  ui ? processUiInput(RIGHT): processMovementInput(RIGHT);
		if(digitalRead(DOWN) == LOW)  ui ? processUiInput(DOWN): processMovementInput(DOWN);
		if(digitalRead(LEFT) == LOW)  ui ? processUiInput(LEFT): processMovementInput(LEFT);

		// inventario / UI
		if(digitalRead(ACTION) == LOW){
            ACTION_PRESSED = true;
			ui = !ui;
			delay(20);
		}


}

// update this consider pickables
bool verifyCollision(unsigned char x, unsigned char y){
	bool enableCollision = true;

	unsigned char size = (unsigned char) ARR_SIZE(ls_collision);
	for(unsigned char i = 0; i< size; i++){
		if (!ls_collision[i].canCollide) continue;
		talking_to = NOBODY;
		if(
				ls_collision[i].posX < x + sizePlayer &&
				ls_collision[i].posX + ls_collision[i].width > x &&
				ls_collision[i].posY < y + sizePlayer &&
				ls_collision[i].posY + ls_collision[i].height > y
			)
			{
				// Detecting if player instance is colliding towards a pick-up item
				if(ls_collision[i].isItem && enableCollision)
				{
					// não dá para alterar variavies aqui :(
					TV.draw_rect(ls_collision[i].posX, ls_collision[i].posY, 10, 10, WHITE);
					ls_collision[i].changeCollision(false);
				}

				// change room logic
				if(ls_collision[i].nextRoom != NO_ROOM ){
					actual_room = ls_collision[i].nextRoom;
					entrada = ls_collision[i].roomDoor;
					changeRoom(); 
				}

				enableCollision = false;
				// npc logic
				// obviamente vai bugar pq em nenhum lugar essa var é resetada
				if(ls_collision[i].npc != NOBODY)
				{
					talking_to = ls_collision[i].npc;
					enableCollision = true;
				}
			}
	}

	return enableCollision;
}


void drawInventory(){
	int x = 40;
	int y = 12;
	// title sc
	TV.print(45, 3, "Inventory");

	// loop to show itens
	for(int i = 0; i < ITEM_MAX; i+=2){
		TV.print(x, y, itens[i]);
		TV.print(x + 40, y, itens[i+1]);
		y += 12;
	}
}


// depois vai ter que fazer um jeito dele pegar a referencia do personagem
void drawCharacterText(){
	// print image
	{
		switch(talking_to){
			case BOY:
				TV.bitmap(20, 20, cat);
				break;
		}
	}

	
	// print name
	{
		switch(talking_to){
			case BOY:
				TV.print(45, 20, "Boy");
				break;
		}
	}
	// talking logic here
	{

	}
	// print text with delay
	TV.print(10, 40, speech[0]);
}

void showUi(){
	char *s = "Cool text";
	// não pode declarar variavel no switch case '-'
	switch(actual_ui){
		case TEXT:
			drawText(s);
			break;
		// essa parte é temporaria pq vai ter q mexer na colisão
		// ou talvez deixa ela aqui e o bixo muda p ui
		case TEXT_WITH_IMAGE:
			drawCharacterText();
			break;
		case INVENTORY:
			drawInventory();
			break;		
	}
}


void drawText(char  text[]){
	TV.print(45, 3, text);
}


void drawBackground(){
	switch(actual_room){
		case TEST:
			TV.bitmap(0,0, cat);
			break;
		case ANOTHER_ONE:
			TV.bitmap(0,0, hall);
			break;
		case SALAO_PRINCIPAL:
			TV.bitmap(0,0, hall);
			break;
		case CORREDOR:
			TV.bitmap(0,0, corredor);
			break;
		case COZINHA:
			TV.bitmap(0,0, cozinha);
			break;
		case ARMAZEM:
			TV.bitmap(0,0, armazem);
			break;
	}
}

void drawMap(){
	drawBackground();
	TV.draw_rect(xPlayer, yPlayer, 10, 10, WHITE, WHITE); //Desenha o player

	
	unsigned char size = (unsigned char) ARR_SIZE(ls_collision);
	for(char i = 0; i< size; i++){
		if(!ls_collision[i].canDraw) continue;
		ls_collision[i].draw();
	}
		//desenhando as paredes/limites das salas
		//(posX inicio da reta, posY inicio da reta, posX que termina a reta, posY que termina, cor da reta)
		/*TV.draw_line(5, 5, 5, 95, WHITE); 
		TV.draw_line(5, 5, 120, 5, WHITE);
		TV.draw_line(5, 95, 120, 95, WHITE);
		TV.draw_line(120, 5, 120, 30, WHITE);
		TV.draw_line(120, 65, 120, 95, WHITE);*/
	
}